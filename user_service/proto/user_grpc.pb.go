// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: user.proto

package userServiceProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_GetUser_FullMethodName         = "/userServiceProto.UserService/GetUser"
	UserService_VerificationKey_FullMethodName = "/userServiceProto.UserService/VerificationKey"
	UserService_PhoneUserCreate_FullMethodName = "/userServiceProto.UserService/PhoneUserCreate"
	UserService_UpdateUserData_FullMethodName  = "/userServiceProto.UserService/UpdateUserData"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUser, opts ...grpc.CallOption) (*User, error)
	VerificationKey(ctx context.Context, in *PhoneVerificationReq, opts ...grpc.CallOption) (*PhoneVerificationRes, error)
	PhoneUserCreate(ctx context.Context, in *UserPhoneCreateReq, opts ...grpc.CallOption) (*UserPhoneCreateRes, error)
	UpdateUserData(ctx context.Context, in *PostUser, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUser, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerificationKey(ctx context.Context, in *PhoneVerificationReq, opts ...grpc.CallOption) (*PhoneVerificationRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneVerificationRes)
	err := c.cc.Invoke(ctx, UserService_VerificationKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PhoneUserCreate(ctx context.Context, in *UserPhoneCreateReq, opts ...grpc.CallOption) (*UserPhoneCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPhoneCreateRes)
	err := c.cc.Invoke(ctx, UserService_PhoneUserCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserData(ctx context.Context, in *PostUser, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_UpdateUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUser(context.Context, *GetUser) (*User, error)
	VerificationKey(context.Context, *PhoneVerificationReq) (*PhoneVerificationRes, error)
	PhoneUserCreate(context.Context, *UserPhoneCreateReq) (*UserPhoneCreateRes, error)
	UpdateUserData(context.Context, *PostUser) (*User, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) VerificationKey(context.Context, *PhoneVerificationReq) (*PhoneVerificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationKey not implemented")
}
func (UnimplementedUserServiceServer) PhoneUserCreate(context.Context, *UserPhoneCreateReq) (*UserPhoneCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneUserCreate not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserData(context.Context, *PostUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserData not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerificationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneVerificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerificationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerificationKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerificationKey(ctx, req.(*PhoneVerificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PhoneUserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PhoneUserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PhoneUserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PhoneUserCreate(ctx, req.(*UserPhoneCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserData(ctx, req.(*PostUser))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userServiceProto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "VerificationKey",
			Handler:    _UserService_VerificationKey_Handler,
		},
		{
			MethodName: "PhoneUserCreate",
			Handler:    _UserService_PhoneUserCreate_Handler,
		},
		{
			MethodName: "UpdateUserData",
			Handler:    _UserService_UpdateUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

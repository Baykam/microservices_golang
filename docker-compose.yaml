  version: '3.8'

  services:
    api_gateway_service:
      container_name: api_gateway_service
      build: 
        context: .
        dockerfile: docker/api_gateway.Dockerfile
      ports:
        - "5001:5001"
        - "3001:3001"
        - "8001:8001"
      volumes:
        - ./:/app
      restart: always
      environment:
        - POSTGRES_HOST=host.docker.internal
        - POSTGRES_PORT=5432
        - REDIS_ADDR=host.docker.internal:6380
        - MONGO_URI=mongodb://host.docker.internal:27017
        - JAEGER_HOST=host.docker.internal:6831
        - KAFKA_BROKERS=host.docker.internal:9092
        - USER_SERVICE=user_service:5009
      depends_on:
        - redis
        - prometheus
        - grafana
        - jaeger
        - zoo1
        - kafka1
        - user_service
      networks: [ "microservices" ]

    user_service:
      container_name: user_service
      build:
        context: .
        dockerfile: docker/user_service.Dockerfile
      ports:
        - "5009:5005"
        - "3009:3005"
        - "8009:8005"
      volumes:
        - ./:/app
      restart: always
      environment:
        - POSTGRES_HOST=host.docker.internal
        - POSTGRES_PORT=5432
        - REDIS_ADDR=host.docker.internal:6380
        - MONGO_URI=mongodb://host.docker.internal:27017
        - JAEGER_HOST=host.docker.internal:6831
        - KAFKA_BROKERS=host.docker.internal:9092
      depends_on:
        - redis
        - prometheus
        - grafana
        - jaeger
        - mongodb
        - microservices_postgesql
        - zoo1
        - kafka1
      networks: [ "microservices" ]

    prometheus:
      image: prom/prometheus:latest
      container_name: prometheus
      ports:
        - "9090:9090"
      command:
        - --config.file=/etc/prometheus/prometheus.yml
      volumes:
        - ./monitoring/prometheus_docker.yml:/etc/prometheus/prometheus.yml:ro
      networks: [ "microservices" ]

    node_exporter:
      container_name: node_exporter_container
      restart: always
      image: prom/node-exporter
      ports:
        - '9101:9100'
      networks: [ "microservices" ]

    grafana:
      container_name: grafana_container
      restart: always
      image: grafana/grafana
      ports:
        - '3005:3000'
      networks: [ "microservices" ]

    microservices_postgesql:
      image: postgres:13-alpine
      container_name: microservices_postgesql
      expose:
        - "5432"
      ports:
        - "5432:5432"
      restart: always
      environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        - POSTGRES_DB=products
        - POSTGRES_HOST=5432
      command: -p 5432
      volumes:
        - ./microservices_pgdata:/var/lib/postgresql/data
      networks: [ "microservices" ]

    redis:
      image: redis:6-alpine
      restart: always
      container_name: microservices_redis
      ports:
        - "6380:6380"
      networks: [ "microservices" ]

    zoo1:
      image: confluentinc/cp-zookeeper:7.3.2
      restart: always
      hostname: zoo1
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_SERVER_ID: 1
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_SERVERS: zoo1:2888:3888
      volumes:
        - ./zk-single-kafka-single/zoo1/data:/data
        - ./zk-single-kafka-single/zoo1/datalog:/datalog
      networks: [ "microservices" ]

    kafka1:
      image: confluentinc/cp-kafka:7.3.2
      restart: always
      hostname: kafka1
      ports:
        - "9092:9092"
        - "29092:29092"
        - "9999:9999"
      environment:
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_JMX_PORT: 9999
        KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
        KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      volumes:
        - ./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
      depends_on:
        - zoo1
      networks: [ "microservices" ]

    mongodb:
      image: mongo:latest
      restart: always
      environment:
        MONGO_INITDB_ROOT_USERNAME: admin
        MONGO_INITDB_ROOT_PASSWORD: admin
        MONGODB_DATABASE: products
      ports:
        - "27017:27017"
      volumes:
        - mongodb_data_container:/data/db
      networks: [ "microservices" ]

    jaeger:
      container_name: jaeger_container
      restart: always
      image: jaegertracing/all-in-one:1.21
      environment:
        - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      ports:
        - "5775:5775/udp"
        - "6831:6831/udp"
        - "6832:6832/udp"
        - "5778:5778"
        - "16686:16686"
        - "14268:14268"
        - "14250:14250"
        - "9411:9411"
      networks: [ "microservices" ]

  volumes:
    mongodb_data_container: 
      driver: local

  networks:
    microservices:
      name: microservices
      # driver: bridge